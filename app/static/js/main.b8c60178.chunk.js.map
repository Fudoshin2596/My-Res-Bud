{"version":3,"sources":["views/Home/Home.js","views/ChatBox/ChatBox.js","components/NavBar/NavBar.js","routes.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","table","minWidth","button","READ_RESTURANTS","gql","CREATE_RESTURANT","REMOVE_RESTURANT","Home","input","useQuery","data","loading","error","useMutation","createResturant","deleteResturant","classes","className","Typography","variant","title","onSubmit","e","preventDefault","variables","name","value","setTimeout","window","location","reload","type","placeholder","ref","node","Button","color","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","resturants","map","scope","address","rating","price","phoneNumber","cuisines","startIcon","onClick","id","Component","ChatBox","Container","content","http-equiv","allow","width","height","src","flexGrow","menuButton","marginRight","offset","mixins","toolbar","NavBar","Fragment","AppBar","position","Toolbar","to","Routes","exact","path","Boolean","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","App","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b8c60178.chunk.js","sourcesContent":["import React from 'react';\nimport './Home.css';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from \"graphql-tag\";\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  table: {\n    minWidth: 650,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\n\nconst READ_RESTURANTS = gql`\n  query {\n    resturants{\n      id\n      name\n      address\n      rating\n      price\n      phoneNumber\n      cuisines\n    }\n}`;\n\nconst CREATE_RESTURANT = gql`\nmutation createResturant($name: String!) {\n  createResturant(name: $name){\n    resturant{\n      id\n    }\n  }\n}\n`;\n\nconst REMOVE_RESTURANT = gql`\n  mutation deleteResturant($id: ID!) {\n  deleteResturant(id: $id) {\n    id\n  }\n}\n`;\n\nfunction Home() {\n  let input;\n  const { data, loading, error } = useQuery(READ_RESTURANTS);\n  const [createResturant] = useMutation(CREATE_RESTURANT);\n  const [deleteResturant] = useMutation(REMOVE_RESTURANT);\n  const classes = useStyles();\n\n  if (loading) return <p>loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n\n  return (\n  <div className={classes.root}>\n  <Typography variant=\"h6\" className={classes.title}>\n  Add New Restruant\n  </Typography>\n  <form className={classes.root} onSubmit={e => {\n    e.preventDefault();\n    createResturant({ variables: { name: input.value } });\n    input.value = '';\n    setTimeout(() => window.location.reload(), 2100);\n    }}>\n    <input className={classes.root} type=\"text\" placeholder=\"Enter resturant name\" ref={node => { input = node; }}></input>\n    <Button variant=\"contained\" color=\"primary\" type=\"submit\">Add</Button>\n  </form>\n  <TableContainer component={Paper}>\n    <Table className={classes.table} aria-label=\"simple table\">\n      <TableHead>\n        <TableRow>\n          <TableCell>Name</TableCell>\n          <TableCell align=\"left\">Address</TableCell>\n          <TableCell align=\"left\">Rating</TableCell>\n          <TableCell align=\"left\">Price</TableCell>\n          <TableCell align=\"left\">Phone Number</TableCell>\n          <TableCell align=\"left\">Cuisines</TableCell>\n          {/* <TableCell align=\"left\">Website</TableCell>  */}\n          <TableCell align=\"left\">Delete</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {data.resturants.map((resturants) => (\n          <TableRow key={resturants.id}>\n            <TableCell component=\"th\" scope=\"row\">\n              {resturants.name}\n            </TableCell>\n            <TableCell align=\"left\">{resturants.address}</TableCell>\n            <TableCell align=\"left\">{resturants.rating}</TableCell>\n            <TableCell align=\"left\">{resturants.price}</TableCell>\n            <TableCell align=\"left\">{resturants.phoneNumber}</TableCell>\n            <TableCell align=\"left\">{resturants.cuisines}</TableCell>\n            {/* <TableCell align=\"left\">{resturants.website}</TableCell> */}\n            <TableCell align=\"left\">\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              className={classes.button}\n              startIcon={<DeleteIcon />}\n              onClick={() => {\n              deleteResturant({ variables: { id: resturants.id } });\n              window.location.reload();\n            }}>Delete</Button>\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>\n  </div>\n);\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport Container from '@material-ui/core/Container';\n\n// GoogelDialogFlow Basic ChatBox Utility\nfunction ChatBox() {\n  return (\n    <Container >\n        <meta name=\"viewport\" content=\"width-device-width, initial-scale=1\" />\n        <meta content=\"ie=edge\" http-equiv=\"X-UA-Compatible\"/>\n        <iframe id=\"iframe\" allow=\"microphone;\" width=\"875\" height=\"800\" src=\"https://console.dialogflow.com/api-client/demo/embedded/cecffa92-4622-4969-b78f-a45134699444\"></iframe>\n    </Container>\n  );\n}\n\n// Kommunicate ChatBox Utility\nclass XChatBox extends Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount(){\n    (function(d, m){\n      var kommunicateSettings = {\"appId\":\"352375d75eb6b49a95122bd66f9eddcef\",\"popupWidget\":true,\"automaticChatOpenOnNavigation\":true};\n      var s = document.createElement(\"script\"); s.type = \"text/javascript\"; s.async = true;\n      s.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\n      var h = document.getElementsByTagName(\"head\")[0]; h.appendChild(s);\n      window.kommunicate = m; m._globals = kommunicateSettings;\n    })(document, window.kommunicate || {});\n  }\nrender() {\n    return (\n      <div></div>\n    )\n  }\n\n}\n\nexport default ChatBox;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  offset: theme.mixins.toolbar,\n}));\n\nconst NavBar = () => {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            My Res Bud App\n          </Typography>\n          <Button color=\"inherit\"><Link to=\"/Home\">Home</Link></Button>\n          <Button color=\"inherit\"><Link to=\"/ChatBox\">ChatBox</Link></Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default NavBar;","import React from 'react';\nimport { Home } from './views/Home';\nimport { ChatBox } from './views/ChatBox';\nimport { NavBar } from './components/NavBar';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nexport const Routes = () => {\n  return (\n    <div>\n      <NavBar />\n      <Switch>\n        <Route exact path=\"/Home\" component={Home} />\n        <Route exact path=\"/\">\n          <Redirect to=\"/Home\" />\n        </Route>\n        <Route exact path=\"/ChatBox\" component={ChatBox} />\n      </Switch>\n    </div>\n  );\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Routes } from './routes'; \nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:8000/graphql/\",\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Routes />\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}